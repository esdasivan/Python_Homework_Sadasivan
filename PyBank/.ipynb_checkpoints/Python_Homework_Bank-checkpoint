{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b470e642-c706-4d84-8f39-94162f275b05",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "I/O operation on closed file.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mC:\\Users\\SADASI~1\\AppData\\Local\\Temp/ipykernel_1896/2987199573.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[0munprofitable_months\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     15\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 16\u001b[1;33m \u001b[1;32mfor\u001b[0m \u001b[0mn\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mreader\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     17\u001b[0m     \u001b[0mcount\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m     \u001b[0mtotal\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: I/O operation on closed file."
     ]
    }
   ],
   "source": [
    "import csv\n",
    "from pathlib import Path\n",
    "new_path = Path(\"budget_data.csv\")\n",
    "\n",
    "with open(new_path) as new_file:\n",
    "    reader = csv.reader(new_file)\n",
    "\n",
    "month_count=0\n",
    "total = 0\n",
    "max =0\n",
    "min = 0\n",
    "\n",
    "profitable_months = []\n",
    "unprofitable_months = []\n",
    "\n",
    "for n in reader:\n",
    "    count += 1\n",
    "    total += n\n",
    "    \n",
    "    if min ==0:\n",
    "        min = n\n",
    "    elif min > n:\n",
    "        min = n\n",
    "    elif max < n:\n",
    "        max = n\n",
    "        \n",
    "    if n > 0:\n",
    "        profitable_months.append(n)\n",
    "    if n < 0: \n",
    "        unprofitable_months.append(n)\n",
    "        \n",
    "\n",
    "average = round(total/count,2)\n",
    "\n",
    "profitable_count= len(profitable_months)\n",
    "unprofitable_count = len(unprofitable_months)\n",
    "\n",
    "print(f\"{profitable_count}, {unprofitable_count}, {total}, {month_count}\")\n",
    "\n",
    "\n",
    "        \n",
    "        \n",
    "        \n",
    "\n",
    "    \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1123b185-8050-4c29-b361-bf3c66efb253",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
